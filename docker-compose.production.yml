services:
  # Banco de dados PostgreSQL para produção
  postgres:
    image: postgres:15-alpine
    container_name: voltly-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - voltly-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Aplicação Voltly para produção
  voltly:
    image: voltly:latest
    container_name: voltly-app-prod
    ports:
      - "8080:8080"
    environment:
      # Configurações do banco de dados
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      # Configurações da aplicação
      SPRING_PROFILES_ACTIVE: production
      SERVER_PORT: 8080
      # Configurações de segurança
      SECURITY_JWT_SECRET: ${JWT_SECRET}
      # Configurações do Flyway
      SPRING_FLYWAY_BASELINE_ON_MIGRATE: true
      # Configurações do Hibernate
      SPRING_JPA_SHOW_SQL: false
      SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: false
      # Configurações do HikariCP
      SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE: 10
      SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE: 5
      # Configurações de logging
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_BR_COM_FIAP_VOLTLY: DEBUG
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - voltly-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Nginx como proxy reverso para produção
  nginx:
    image: nginx:alpine
    container_name: voltly-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - voltly
    networks:
      - voltly-network-prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Redis para cache (opcional)
  redis:
    image: redis:7-alpine
    container_name: voltly-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - voltly-network-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  voltly-network-prod:
    driver: bridge
